rational powerArg1, powerResult;
integer powerArg2, factorialArg,
        factorialResult;

procedure factorial
    integer i , acc;
    {
        i := factorialArg;
        acc := 1;
        while (i > 0) do
        {
            acc := acc*i;
            i := i-1;
        } od;
        factorialResult := acc;
    };

procedure power
    integer i;
    boolean cond;
    {
        i := 0;
        powerResult := make_rat(1,1);
        powerResult := (1.0(0));
        cond := i<powerArg2;
        while (cond = tt) do
        {
            powerResult := powerResult .*. powerArg1;
            i := i+1;
            cond := i<powerArg2;
        } od;
    }
;

procedure boolProc
    integer n;
    boolean expectedResult;
    {
        read(n);
        read(expectedResult);
        if ((n % 2 = 0) = expectedResult) then {
            print(1);
        } else {
            print(0);
        } fi;
    };

{
    read(factorialArg);
    call factorial;
    print ( factorialResult );

    read(powerArg1);
    read(
        powerArg2
    );
    call power;
    print (powerResult);

    call boolProc;
}